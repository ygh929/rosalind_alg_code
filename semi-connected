class vet(int):
    go=[]
    def addgo(self,i):
        if self.go:
            self.go.append(i)
        else:
            self.go=[i]
    tra=0
    come=[]
    def addcome(self,i):
        if self.come:
            self.come.append(i)
        else:
            self.come=[i]

def readedges(E,n):
    G=map(vet,range(1,n+1))
    for e in E:
        i1=e[0]-1
        i2=e[1]-1
        G[i1].addgo(i2)
        G[i2].addcome(i1)
    return G


def dfs(G,i):
    Q=[]
    G[i].tra=1
    Q=[i]
    result=[]
    while Q:
        current=Q[0]
        possgo=[x for x in G[current].go if G[x].tra==0]
        if possgo:
            Q=possgo+Q
            for j in possgo:
                G[j].tra=1
        else:
            result.append(Q.pop(0))
    return result

def reverseE(E):
    E1=[]
    for e in E:
        temp=e[0]
        e[0]=e[1]
        e[1]=temp
        E1.append(e)
    return E1

f=open('rosalind_sc.txt','r')
k=int(f.readline())
result=range(k)
for ki in range(k):
    f.readline()
    num=map(int,f.readline().split())
    nv=num[0]
    ne=num[1]
    E=[]
    for t in range(ne):
        E.append(map(int,f.readline().split()))
    G=readedges(E,nv)
    order=[]
    while not reduce(lambda x,y:x and y,map(lambda x:x.tra==1,G)):
        i=map(lambda x:x.tra,G).index(0)
        order=order+dfs(G,i)
    E1=reverseE(E)
    G1=readedges(E1,nv)
    scc=[]
    while order:
        i=order[-1]
        comp=dfs(G1,i)
        scc.append(comp)
        order=[x for x in order if x not in comp]
    nscc=len(scc)
    Escc=[]
    for i in range(nscc):
        out=[]
        for ind in scc[i]:
            out=out+G[ind].go
        for j in range(nscc):
            if j != i and set(out).intersection(set(scc[j])):
                Escc.append([i,j])


    Gscc=readedges(Escc,nscc)
    Q=[]
    for i in Gscc:
        if not i.come:
            Q.append(i-1)
    order=[]
    while Q:
        order=order+dfs(Gscc,Q[0])
        Q.pop(0)
    result[ki]=1
    for i in range (len(order)-1,1,-1):
        if  order[i-1] not in Gscc[order[i]].go:
            result[ki]=-1
            break

print ' '.join(map(str,result))
